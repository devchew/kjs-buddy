/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_getHello"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** User login */
        post: operations["AuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** User registration */
        post: operations["AuthController_register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user profile information */
        get: operations["AuthController_getProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all cards
         * @description Retrieves all cards belonging to the authenticated user
         */
        get: operations["CardsController_findAll"];
        put?: never;
        /**
         * Create new card
         * @description Creates a new rally card for the authenticated user
         */
        post: operations["CardsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cards/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get card by ID
         * @description Retrieves a specific card by its ID
         */
        get: operations["CardsController_findOne"];
        /**
         * Update card
         * @description Updates a specific card by its ID
         */
        put: operations["CardsController_update"];
        post?: never;
        /**
         * Delete card
         * @description Deletes a specific card by its ID
         */
        delete: operations["CardsController_remove"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cards/templates/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all public card templates
         * @description Retrieves all card templates flagged as public
         */
        get: operations["CardTemplatesController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cards/templates/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new card template
         * @description Creates a new card template for the authenticated user
         */
        post: operations["CardTemplatesController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cards/templates/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get card template by ID
         * @description Retrieves a specific public card template by its ID
         */
        get: operations["CardTemplatesController_findOne"];
        /**
         * Update card template
         * @description Updates a specific card template by its ID (owner only)
         */
        put: operations["CardTemplatesController_update"];
        post?: never;
        /**
         * Delete card template
         * @description Deletes a specific card template by its ID (owner only)
         */
        delete: operations["CardTemplatesController_remove"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        LoginDto: {
            /**
             * @description User email address
             * @example user@example.com
             */
            email: string;
            /**
             * @description User password
             * @example password123
             */
            password: string;
        };
        RegisterDto: {
            /**
             * @description User email address
             * @example user@example.com
             */
            email: string;
            /**
             * @description User password
             * @example password123
             */
            password: string;
        };
        CardPanelDto: {
            /**
             * @description Panel number (sequential)
             * @example 1
             */
            number: number;
            /**
             * @description Panel name/description
             * @example PS1 - Mountain Pass
             */
            name: string;
            /**
             * @description Finish time in milliseconds
             * @example 0
             */
            finishTime: number;
            /**
             * @description Provisional start time in milliseconds
             * @example 34200000
             */
            provisionalStartTime: number;
            /**
             * @description Actual start time in milliseconds
             * @example 34200000
             */
            actualStartTime: number;
            /**
             * @description Driving time in milliseconds
             * @example 300000
             */
            drivingTime: number;
            /**
             * @description Result time in milliseconds
             * @example 0
             */
            resultTime: number;
            /**
             * @description Next PKC time in milliseconds
             * @example 0
             */
            nextPKCTime: number;
            /**
             * @description Arrival time in milliseconds
             * @example 0
             */
            arrivalTime: number;
        };
        CreateCardDto: {
            /**
             * @description Name of the event/card
             * @example Rally Monte Calvaria
             */
            name: string;
            /**
             * @description Card number in the event
             * @example 1
             */
            cardNumber: number;
            /**
             * @description Car number in the event
             * @example 69
             */
            carNumber: number;
            /**
             * @description Event date in YYYY-MM-DD format
             * @example 2025-04-26
             */
            date: string;
            /**
             * @description Logo image filename or URL
             * @example montecalvaria.png
             */
            logo: string;
            /**
             * @description Sponsor logo image filename or URL
             * @example pzmot.png
             */
            sponsorLogo: string;
            /**
             * @description Array of panels in the card
             * @example [
             *       {
             *         "number": 1,
             *         "name": "",
             *         "finishTime": 0,
             *         "provisionalStartTime": 34200000,
             *         "actualStartTime": 34200000,
             *         "drivingTime": 0,
             *         "resultTime": 0,
             *         "nextPKCTime": 0,
             *         "arrivalTime": 0
             *       }
             *     ]
             */
            panels: components["schemas"]["CardPanelDto"][];
        };
        Card: {
            /**
             * @description Unique identifier for the card
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Name of the event/card
             * @example Rally Monte Calvaria
             */
            name: string;
            /**
             * @description Card number in the event
             * @example 1
             */
            cardNumber: number;
            /**
             * @description Car number in the event
             * @example 69
             */
            carNumber: number;
            /**
             * @description Event date in YYYY-MM-DD format
             * @example 2025-04-26
             */
            date: string;
            /**
             * @description Logo image filename or URL
             * @example montecalvaria.png
             */
            logo: string;
            /**
             * @description Sponsor logo image filename or URL
             * @example pzmot.png
             */
            sponsorLogo: string;
            /**
             * @description Array of panels in the card
             * @example [
             *       {
             *         "number": 1,
             *         "name": "",
             *         "finishTime": 0,
             *         "provisionalStartTime": 34200000,
             *         "actualStartTime": 34200000,
             *         "drivingTime": 0,
             *         "resultTime": 0,
             *         "nextPKCTime": 0,
             *         "arrivalTime": 0
             *       },
             *       {
             *         "number": 2,
             *         "name": "PS1 - Mountain Pass",
             *         "finishTime": 0,
             *         "provisionalStartTime": 34200000,
             *         "actualStartTime": 34200000,
             *         "drivingTime": 300000,
             *         "resultTime": 0,
             *         "nextPKCTime": 0,
             *         "arrivalTime": 0
             *       }
             *     ]
             */
            panels: string[];
            /**
             * @description ID of the user who owns this card
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            userId: string;
            /**
             * @description Timestamp of when the card was last accessed
             * @example 1714201274525
             */
            lastUsed: number;
            /**
             * Format: date-time
             * @description Date and time when the card was created
             * @example 2025-04-26T12:00:00Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Date and time when the card was last updated
             * @example 2025-04-26T15:30:45Z
             */
            updatedAt: string;
        };
        UpdateCardDto: {
            /**
             * @description Name of the event/card
             * @example Rally Monte Calvaria
             */
            name?: string;
            /**
             * @description Card number in the event
             * @example 1
             */
            cardNumber?: number;
            /**
             * @description Car number in the event
             * @example 69
             */
            carNumber?: number;
            /**
             * @description Event date in YYYY-MM-DD format
             * @example 2025-04-26
             */
            date?: string;
            /**
             * @description Logo image filename or URL
             * @example montecalvaria.png
             */
            logo?: string;
            /**
             * @description Sponsor logo image filename or URL
             * @example pzmot.png
             */
            sponsorLogo?: string;
            /**
             * @description Array of panels in the card
             * @example [
             *       {
             *         "number": 1,
             *         "name": "",
             *         "finishTime": 0,
             *         "provisionalStartTime": 34200000,
             *         "actualStartTime": 34200000,
             *         "drivingTime": 0,
             *         "resultTime": 0,
             *         "nextPKCTime": 0,
             *         "arrivalTime": 0
             *       }
             *     ]
             */
            panels?: components["schemas"]["CardPanelDto"][];
        };
        CardTemplate: {
            /**
             * @description Unique identifier for the card template
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Name of the card template
             * @example Rally Monte Calvaria Template
             */
            name: string;
            /**
             * @description Description of the card template
             * @example A template for Rally Monte Calvaria event
             */
            description: string;
            /**
             * @description Logo image filename or URL
             * @example montecalvaria.png
             */
            logo: string;
            /**
             * @description Sponsor logo image filename or URL
             * @example pzmot.png
             */
            sponsorLogo: string;
            /**
             * @description Array of panels in the template
             * @example [
             *       {
             *         "number": 1,
             *         "name": "",
             *         "finishTime": 0,
             *         "provisionalStartTime": 34200000,
             *         "actualStartTime": 34200000,
             *         "drivingTime": 0,
             *         "resultTime": 0,
             *         "nextPKCTime": 0,
             *         "arrivalTime": 0
             *       }
             *     ]
             */
            panels: string[];
            /**
             * @description Whether the template is public and accessible without authentication
             * @example true
             */
            isPublic: boolean;
            /**
             * @description ID of the user who created this template
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            userId: string;
            /**
             * Format: date-time
             * @description Date and time when the template was created
             * @example 2025-04-26T12:00:00Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Date and time when the template was last updated
             * @example 2025-04-26T15:30:45Z
             */
            updatedAt: string;
        };
        CreateCardTemplateDto: {
            /**
             * @description Name of the card template
             * @example Rally Monte Calvaria Template
             */
            name: string;
            /**
             * @description Description of the card template
             * @example A template for Rally Monte Calvaria event
             */
            description?: string;
            /**
             * @description Logo image filename or URL
             * @example montecalvaria.png
             */
            logo: string;
            /**
             * @description Sponsor logo image filename or URL
             * @example pzmot.png
             */
            sponsorLogo: string;
            /**
             * @description Array of panels in the template
             * @example [
             *       {
             *         "number": 1,
             *         "name": "",
             *         "finishTime": 0,
             *         "provisionalStartTime": 34200000,
             *         "actualStartTime": 34200000,
             *         "drivingTime": 0,
             *         "resultTime": 0,
             *         "nextPKCTime": 0,
             *         "arrivalTime": 0
             *       }
             *     ]
             */
            panels: string[];
            /**
             * @description Whether the template is public and accessible without authentication
             * @default false
             * @example true
             */
            isPublic: boolean;
        };
        UpdateCardTemplateDto: {
            /**
             * @description Name of the card template
             * @example Rally Monte Calvaria Template
             */
            name?: string;
            /**
             * @description Description of the card template
             * @example A template for Rally Monte Calvaria event
             */
            description?: string;
            /**
             * @description Logo image filename or URL
             * @example montecalvaria.png
             */
            logo?: string;
            /**
             * @description Sponsor logo image filename or URL
             * @example pzmot.png
             */
            sponsorLogo?: string;
            /**
             * @description Array of panels in the template
             * @example [
             *       {
             *         "number": 1,
             *         "name": "",
             *         "finishTime": 0,
             *         "provisionalStartTime": 34200000,
             *         "actualStartTime": 34200000,
             *         "drivingTime": 0,
             *         "resultTime": 0,
             *         "nextPKCTime": 0,
             *         "arrivalTime": 0
             *       }
             *     ]
             */
            panels?: string[];
            /**
             * @description Whether the template is public and accessible without authentication
             * @default false
             * @example true
             */
            isPublic: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_getHello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginDto"];
            };
        };
        responses: {
            /** @description Login successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterDto"];
            };
        };
        responses: {
            /** @description User successfully registered */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_getProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns user profile data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CardsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns an array of cards */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Card"][];
                };
            };
            /** @description User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CardsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCardDto"];
            };
        };
        responses: {
            /** @description The card has been successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Card"];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CardsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the card to retrieve */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the requested card */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Card"];
                };
            };
            /** @description User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Card not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CardsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the card to update */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCardDto"];
            };
        };
        responses: {
            /** @description The card has been successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Card"];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User does not have permission to update this card */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Card not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CardsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the card to delete */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The card has been successfully deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User does not have permission to delete this card */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Card not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CardTemplatesController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns an array of public card templates */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardTemplate"][];
                };
            };
        };
    };
    CardTemplatesController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCardTemplateDto"];
            };
        };
        responses: {
            /** @description The card template has been successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardTemplate"];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CardTemplatesController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the card template to retrieve */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the requested public card template */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardTemplate"];
                };
            };
            /** @description Card template not found or is not public */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CardTemplatesController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the card template to update */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCardTemplateDto"];
            };
        };
        responses: {
            /** @description The card template has been successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardTemplate"];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User does not have permission to update this card template */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Card template not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CardTemplatesController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the card template to delete */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The card template has been successfully deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User does not have permission to delete this card template */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Card template not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
